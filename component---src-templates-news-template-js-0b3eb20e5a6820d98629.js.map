{"version":3,"sources":["webpack:///./src/templates/newsTemplate.js","webpack:///./node_modules/core-js/modules/es6.array.find.js"],"names":["Template","data","markdownRemark","frontmatter","html","foundImage","allFile","edges","find","i","node","name","featureImage","src","publicURL","hidden","text","title","date","className","dangerouslySetInnerHTML","__html","pageQuery","$export","$find","forced","Array","P","F","callbackfn","this","arguments","length","undefined"],"mappings":"mRAKe,SAASA,EAAT,GAEX,IADFC,EACC,EADDA,KAEQC,EAAmBD,EAAnBC,eACAC,EAAsBD,EAAtBC,YAAaC,EAASF,EAATE,KAEjBC,EAAaJ,EAAKK,QAAQC,MAAMC,MAClC,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,OAASR,EAAYS,gBAGnC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWC,IAAKR,EAAWK,KAAKI,YAChC,kBAAC,IAAD,CAASC,QAAM,IACf,kBAAC,IAAD,CAAWC,MAAI,GACb,4BAAKb,EAAYc,OACjB,+BAAQd,EAAYe,MACpB,kBAAC,IAAD,CAASH,QAAM,IAQf,yBACEI,UAAU,oBACVC,wBAAyB,CAAEC,OAAQjB,OAMtC,IAAMkB,EAAS,c,kCCpCtB,IAAIC,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,OAAR,CAA4B,GAEpCC,GAAS,EADH,QAGC,IAAIC,MAAM,GAAM,MAAE,WAAcD,GAAS,KACpDF,EAAQA,EAAQI,EAAIJ,EAAQK,EAAIH,EAAQ,QAAS,CAC/CjB,KAAM,SAAcqB,GAClB,OAAOL,EAAMM,KAAMD,EAAYE,UAAUC,OAAS,EAAID,UAAU,QAAKE,MAGzE,EAAQ,OAAR,CATU","file":"component---src-templates-news-template-js-0b3eb20e5a6820d98629.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport { Container, Item, Divider } from 'semantic-ui-react'\nimport { Jumbotron } from '../components/styledComponents'\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds your post data\n  const { frontmatter, html } = markdownRemark\n\n  let foundImage = data.allFile.edges.find(\n    i => i.node.name === frontmatter.featureImage\n  )\n\n  return (\n    <Layout>\n      <Jumbotron src={foundImage.node.publicURL} />\n      <Divider hidden />\n      <Container text>\n        <h1>{frontmatter.title}</h1>\n        <small>{frontmatter.date}</small>\n        <Divider hidden />\n        {/* <Item>\n          <Item.Image size=\"small\" src={frontmatter.featureImage} />\n          <Item.Content>\n            <Item.Header as=\"a\">{frontmatter.title}</Item.Header>\n            <Item.Meta>{frontmatter.date}</Item.Meta>\n          </Item.Content>\n        </Item> */}\n        <div\n          className=\"blog-post-content\"\n          dangerouslySetInnerHTML={{ __html: html }}\n        />\n      </Container>\n    </Layout>\n  )\n}\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        featureImage\n      }\n    }\n    allFile(filter: { absolutePath: { regex: \"/(resources)/\" } }) {\n      edges {\n        node {\n          name\n          extension\n          dir\n          modifiedTime\n          publicURL\n        }\n      }\n    }\n  }\n`\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n"],"sourceRoot":""}